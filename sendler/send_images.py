import os
import requests
import json
from icecream import ic
from logger import print_error


def parse_info_file(file_path):
    """–ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å."""
    data = {}
    with open(file_path, "r", encoding="utf-8") as file:
        for line in file:
            if ":" in line:
                key, value = line.strip().split(":", 1)
                data[key.strip()] = value.strip()

    with open(os.path.join(os.path.split(file_path)[0], 'des.txt'), mode='r', encoding='utf-8') as f:
        data['–û–ø–∏—Å–∞–Ω–∏–µ'] = f.read()
    return data


def build_message_without_description(data):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è."""
    fields = {
        '–ù–∞–∑–≤–∞–Ω–∏–µ': "üé¨ <b>{}</b>",
        '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': "¬©Ô∏è {}",
        '–°–ª–æ–≥–∞–Ω': "üó£ –°–ª–æ–≥–∞–Ω: {}",
        '–ñ–∞–Ω—Ä': "üé≠ –ñ–∞–Ω—Ä: {}",
        '–ì–æ–¥': "üóì –ì–æ–¥: {}",
        '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': "‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {}",
        '–°—Ç—Ä–∞–Ω–∞': "üåç –°—Ç—Ä–∞–Ω–∞: {}",
        '–†–µ–π—Ç–∏–Ω–≥': "‚≠ê –†–µ–π—Ç–∏–Ω–≥: {}",
        '–†–µ–∂–∏—Å—Å–µ—Ä': "üé• –†–µ–∂–∏—Å—Å–µ—Ä: {}",
        '–ê–∫—Ç–µ—Ä—ã': "ü§° –ê–∫—Ç–µ—Ä—ã: {}",
        '–ü—Ä–µ–º—å–µ—Ä–∞ –≤ –º–∏—Ä–µ': "üåê –ü—Ä–µ–º—å–µ—Ä–∞ –≤ –º–∏—Ä–µ: {}",
        '–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞ –≤ –†–æ—Å—Å–∏–∏': "üá∑üá∫ –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞ –≤ –†–æ—Å—Å–∏–∏: {}"
    }

    message_parts = [fields[key].format(data[key]) for key in fields if
                     key in data and data[key] and data[key] != '---']

    if 'url' in data and data['url'] and data['url'] != '---':
        message_parts.append(f"\nüîó <a href='{data['url']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>")

    return "\n".join(message_parts)


def build_message_with_description(data):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º."""
    message_parts = []

    if '–ù–∞–∑–≤–∞–Ω–∏–µ' in data and data['–ù–∞–∑–≤–∞–Ω–∏–µ']:
        message_parts.append(f"üé¨ <b>{data['–ù–∞–∑–≤–∞–Ω–∏–µ']}</b>")

    if '–û–ø–∏—Å–∞–Ω–∏–µ' in data and data['–û–ø–∏—Å–∞–Ω–∏–µ']:
        message_parts.append(f"üìù {data['–û–ø–∏—Å–∞–Ω–∏–µ']}")

    message = "\n\n".join(message_parts)

    max_length = 1024
    if len(message) > max_length:
        message = message[:max_length - 10] + "...\n(–û–±—Ä–µ–∑–∞–Ω–æ)"

    return message


def send_poster_with_info(bot_token, chat_id, info_file_path, image_folder):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç–µ—Ä —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å–º–µ."""
    send_photo_url = f"https://api.telegram.org/bot{bot_token}/sendPhoto"
    poster_path = os.path.join(image_folder, "poster.jpg")

    if not os.path.exists(poster_path):
        print_error("[send_poster_with_info] –ü–æ—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

    data = parse_info_file(info_file_path)
    caption = build_message_without_description(data)

    try:
        with open(poster_path, "rb") as poster_file:
            response = requests.post(
                send_photo_url,
                data={
                    "chat_id": chat_id,
                    "caption": caption,
                    "parse_mode": "HTML"
                },
                files={"photo": poster_file}
            )

        if response.status_code == 200:
            response_data = response.json()
            if response_data.get("ok") and response_data.get("result", {}).get("message_id"):
                return response_data["result"]["message_id"]
            else:
                print_error(f"[send_poster_with_info] –û—à–∏–±–∫–∞: message_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ. –û—Ç–≤–µ—Ç: {response.text}")
                return None
        else:
            print_error(f"[send_poster_with_info] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code} - {response.text}")
            return None

    except Exception as e:
        print_error(f"[send_poster_with_info] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–µ—Ä–∞: {e}")
        return None


def send_photos_with_captions(bot_token, chat_id, image_folder, images_list):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è."""
    send_media_url = f"https://api.telegram.org/bot{bot_token}/sendMediaGroup"

    # –ò—Å–∫–ª—é—á–∞–µ–º poster.jpg –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –¥—Ä—É–≥–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    images_list = [img for img in images_list if img.lower() != "poster.jpg"]
    if not images_list:
        # ic("[send_photos_with_captions] –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∫—Ä–æ–º–µ –ø–æ—Å—Ç–µ—Ä–∞).")
        return

    media_group = []
    files = {}

    for idx, image_filename in enumerate(images_list):
        image_path = os.path.join(image_folder, image_filename)
        if os.path.exists(image_path):
            attach_name = f"file{idx}"
            try:
                files[attach_name] = open(image_path, "rb")
                media_item = {
                    "type": "photo",
                    "media": f"attach://{attach_name}"
                }
                media_group.append(media_item)
            except Exception as e:
                print_error(f"[send_photos_with_captions] –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ {image_filename}: {e}")
        else:
            print_error(f"[send_photos_with_captions] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_filename} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞–ø–∫–µ.")

    if not media_group:
        # ic("[send_photos_with_captions] –ù–µ—Ç –º–µ–¥–∏–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤.")
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã –¥–æ –æ—à–∏–±–∫–∏
        for file in files.values():
            file.close()
        return

    try:
        response = requests.post(
            send_media_url,
            data={"chat_id": chat_id, "media": json.dumps(media_group)},
            files=files
        )

        if response.status_code != 200:
            print_error(f"[send_photos_with_captions] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code} - {response.text}")

    except Exception as e:
        print_error(f"[send_photos_with_captions] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {e}")
    finally:
        for file in files.values():
            file.close()


def send_stills_with_description_as_reply(bot_token, chat_id, reply_to_message_id, info_file_path, image_folder,
                                          stills_images_list):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 3 –∫–∞–¥—Ä–∞ –∏–∑ —Ñ–∏–ª—å–º–∞ —Å –ø–æ–ª–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    send_media_url = f"https://api.telegram.org/bot{bot_token}/sendMediaGroup"

    if not stills_images_list or len(stills_images_list) != 3:
        print_error("[send_stills_with_description_as_reply] –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–≤–Ω–æ 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–¥—Ä–æ–≤.")
        return

    data = parse_info_file(info_file_path)
    caption = build_message_with_description(data)

    media_group = []
    files = {}

    for idx, image_filename in enumerate(stills_images_list):
        image_path = os.path.join(image_folder, image_filename)
        if os.path.exists(image_path):
            attach_name = f"file_still_{idx}"
            try:
                files[attach_name] = open(image_path, "rb")
                media_item = {
                    "type": "photo",
                    "media": f"attach://{attach_name}"
                }
                if idx == 0:  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –ø–µ—Ä–≤–æ–º—É –∫–∞–¥—Ä—É
                    media_item["caption"] = caption
                    media_item["parse_mode"] = "HTML"
                media_group.append(media_item)
            except Exception as e:
                print_error(f"[send_stills_with_description_as_reply] –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ {image_filename}: {e}")
        else:
            print_error(f"[send_stills_with_description_as_reply] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_filename} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    if not media_group or len(media_group) != 3:
        print_error("[send_stills_with_description_as_reply] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤—Å–µ 3 –∫–∞–¥—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        for file in files.values():  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
            file.close()
        return

    try:
        response = requests.post(
            send_media_url,
            data={
                "chat_id": chat_id,
                "media": json.dumps(media_group),
                "reply_to_message_id": reply_to_message_id
            },
            files=files
        )

        if response.status_code != 200:
            print_error(
                f"[send_stills_with_description_as_reply] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code} - {response.text}")

    except Exception as e:
        print_error(f"[send_stills_with_description_as_reply] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–¥—Ä–æ–≤: {e}")
    finally:
        for file in files.values():
            file.close()
