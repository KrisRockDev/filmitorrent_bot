import os
import requests
import json
from icecream import ic
from logger import print_error


def parse_info_file(file_path):
    """–ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å."""
    data = {}
    with open(file_path, "r", encoding="utf-8") as file:
        for line in file:
            if ":" in line:
                key, value = line.strip().split(":", 1)
                data[key.strip()] = value.strip()

    with open(os.path.join(os.path.split(file_path)[0], 'des.txt'), mode='r', encoding='utf-8') as f:
        data['–û–ø–∏—Å–∞–Ω–∏–µ'] = f.read()
    return data


def build_message(data):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è –¥–∞–Ω–Ω—ã—Ö, –∏—Å–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ –ø–æ–ª—è."""
    fields = {
        '–ù–∞–∑–≤–∞–Ω–∏–µ': "üé¨ <b>{}</b>",
        '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ': "¬©Ô∏è {}",
        '–ñ–∞–Ω—Ä': "üé≠ –ñ–∞–Ω—Ä: {}",
        '–ì–æ–¥': "üóì –ì–æ–¥: {}",
        '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': "‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {}",
        '–°—Ç—Ä–∞–Ω–∞': "üåç –°—Ç—Ä–∞–Ω–∞: {}",
        '–†–µ–π—Ç–∏–Ω–≥': "‚≠ê –†–µ–π—Ç–∏–Ω–≥: {}",
        '–†–µ–∂–∏—Å—Å–µ—Ä': "üé• –†–µ–∂–∏—Å—Å–µ—Ä: {}",
        '–ê–∫—Ç–µ—Ä—ã': "ü§° –ê–∫—Ç–µ—Ä—ã: {}",
        '–ü—Ä–µ–º—å–µ—Ä–∞ –≤ –º–∏—Ä–µ': "üåê –ü—Ä–µ–º—å–µ—Ä–∞ –≤ –º–∏—Ä–µ: {}",
        '–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞ –≤ –†–æ—Å—Å–∏–∏': "üá∑üá∫ –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞ –≤ –†–æ—Å—Å–∏–∏: {}",
        '–û–ø–∏—Å–∞–Ω–∏–µ': "üìù {}"
    }

    message_parts = [fields[key].format(data[key]) for key in fields if
                     key in data and data[key] and data[key] != '---']

    if 'url' in data and data['url'] and data['url'] != '---':
        message_parts.append(f"\nüîó <a href='{data['url']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>")

    message = "\n".join(message_parts)

    max_length = 1024
    if len(message) > max_length:
        message = message[:max_length - 10] + "...\n(–û–±—Ä–µ–∑–∞–Ω–æ)"

    return message

def send_photos_with_captions(bot_token, chat_id, info_file_path, image_folder, images_list):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏ –ø–æ–¥–ø–∏—Å—å—é –≤ Telegram."""
    send_media_url = f"https://api.telegram.org/bot{bot_token}/sendMediaGroup"

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
    media_group = []
    files = {}

    for idx, image_filename in enumerate(images_list):
        image_path = os.path.join(image_folder, image_filename)
        if os.path.exists(image_path):
            attach_name = f"file{idx}"
            files[attach_name] = open(image_path, "rb")
            media_item = {
                "type": "photo",
                "media": f"attach://{attach_name}"
            }
            if idx == 0:  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é

                msg = build_message(parse_info_file(info_file_path))
                media_item["caption"] = msg
                media_item["parse_mode"] = "HTML"
            media_group.append(media_item)
        else:
            print_error(f"[send_photos_with_captions] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_filename} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞–ø–∫–µ.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    if not media_group:
        print_error(f"[send_photos_with_captions] –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        response = requests.post(
            send_media_url,
            data={"chat_id": chat_id, "media": json.dumps(media_group)},
            files=files
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        if response.status_code == 200:
            # print("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
            pass
        else:
            print_error(f"[send_photos_with_captions] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code} - {response.text}")

    except Exception as e:
        print_error(f"[send_photos_with_captions] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
        for file in files.values():
            file.close()
